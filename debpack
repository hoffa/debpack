#!/usr/bin/env bash
set -euo pipefail

patch_control() {
    # Parse field
    key=$(echo "$2" | cut -d: -f1)
    value=$(echo "$2" | cut -d: -f2- | sed "s/^[[:space:]]*//")

    # Remove any pre-existing fields with same name
    # Ignore non-zero exit if $1 is empty
    grep -Fiv "${key}:" "$1" > "$1.tmp" || true

    # Add new field
    echo "${key}: ${value}" >> "$1.tmp"
    mv "$1.tmp" "$1"
}

# Only output color if stdout is a TTY
color_echo() {
    if [[ -t 1 ]]; then
        printf "\e[$1m==> %s\e[0m\n" "$2"
    else
        echo "==> $2"
    fi
}

red() {
    color_echo "1;31" "$1"
}

green() {
    color_echo "1;32" "$1"
}

yellow() {
    color_echo "1;33" "$1"
}

cleanup() {
    if [[ -d .debpack ]]; then
        rm -r .debpack
    fi
}

build() {
    cleanup
    mkdir -p .debpack/DEBIAN

    # Allow building packages by only specifying fields through the command line
    green "Copying control file"
    control_file_path=${control_dir}/control
    if [[ ! -f ${control_file_path} ]]; then
        yellow "${control_file_path} not found; assuming empty"
        control_file_path=/dev/null
    fi
    cp -v "${control_file_path}" .debpack/DEBIAN/control

    green "Patching control file"
    for field in "$@"; do
        if [[ ${field} != *:* ]]; then
            red "Invalid field format: ${field}"
            exit 1
        fi
        patch_control .debpack/DEBIAN/control "${field}"
    done
    diff -u "${control_file_path}" .debpack/DEBIAN/control || true

    green "Copying maintainer scripts"
    for file in preinst postinst prerm postrm; do
        if [[ -f ${control_dir}/${file} ]]; then
            cp -v "${control_dir}/${file}" .debpack/DEBIAN/
            chmod 0755 ".debpack/DEBIAN/${file}"
        fi
    done

    green "Copying files"
    # Don't allow empty packages
    if [[ ! -f ${debpackfile_path} ]]; then
        red "Debpackfile not found"
        exit 1
    fi
    while IFS= read -r line || [[ -n ${line} ]]; do
        src=$(echo "${line}" | cut -f1)
        dst=.debpack$(echo "${line}" | cut -f2)
        mkdir -p "${dst%/*}"
        # Allow source wildcards
        # shellcheck disable=SC2086
        cp -v ${src} "${dst}"
    done < "${debpackfile_path}"

    green "Building package"
    fakeroot dpkg-deb --build .debpack

    dpkg-deb --info .debpack.deb
    dpkg --contents .debpack.deb
    dpkg-name --overwrite .debpack.deb

    cleanup
    green "Done"
}

print_usage() {
    cat << EOF
Usage: $0 [-h] [options] [fields...]

Super simple Debian packages.

Options:
  -h       Show this message
  -d PATH  Control files directory (default: debian)
  -f FILE  Debpackfile path (default: Debpackfile)

The package control file can be modified at build-time by
specifying fields in the key:value format. For example:

  debpack Version:1.0 Architecture:i386
EOF
}

debpackfile_path=Debpackfile
control_dir=debian

while getopts "hf:d:" opt; do
    case ${opt} in
        h)
            print_usage
            exit
            ;;
        f)
            debpackfile_path=${OPTARG}
            ;;
        d)
            control_dir=${OPTARG}
            ;;
        \?|*)
            print_usage
            exit 1
            ;;
    esac
done

# Unprocessed opts are control fields
shift $(( OPTIND - 1 ))
build "$@"
