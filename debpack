#!/usr/bin/env bash
set -euo pipefail

init() {
    mkdir debian
    cat > debian/control << EOL
Package: hello-world
Description: hello-world
Version: 1.0.0
Depends:
Maintainer: Jane Doe <jane@doe.com>
Architecture: all
Section: misc
Priority: required
EOL
    cat > hello-world << EOL
#!/bin/sh
echo "Hello, world!"
EOL
    chmod +x hello-world
    printf "hello-world\t/usr/bin/" > .debpack
}

patch_control() {
    key=$(echo "$2" | cut -d: -f1)
    value=$(echo "$2" | cut -d: -f2- | sed "s/^[[:space:]]*//")

    grep -Fiv "${key}:" "$1" > "$1.tmp"
    echo "${key}: ${value}" >> "$1.tmp"
    mv "$1.tmp" "$1"
}

color_echo() {
    if [[ -t 1 ]]; then
        printf "\e[$1m==> %s\e[0m\n" "$2"
    else
        echo "==> $2"
    fi
}

green() {
    color_echo "1;32" "$1"
}

red() {
    color_echo "1;31" "$1"
}

cleanup() {
    if [[ -d .debpack ]]; then
        rm -r .debpack
    fi
}

build() {
    cleanup
    mkdir -p .debpack/DEBIAN

    green "Copying control file"
    cp -v "${debian_path}/control" .debpack/DEBIAN/

    green "Patching control file"
    for field in "$@"; do
        if [[ ${field} != *:* ]]; then
            red "Invalid field format: ${field}"
            exit 1
        fi
        patch_control .debpack/DEBIAN/control "${field}"
    done
    diff -u "${debian_path}/control" .debpack/DEBIAN/control || true

    green "Copying maintainer scripts"
    for file in preinst postinst prerm postrm; do
        if [[ -f ${debian_path}/${file} ]]; then
            cp -v "${debian_path}/${file}" .debpack/DEBIAN/
            chmod 0755 ".debpack/DEBIAN/${file}"
        fi
    done

    green "Copying files"
    # Fail if no Debpackfile
    cat < "${debpackfile_path}" | while IFS= read -r line || [[ -n ${line} ]]; do
        src=$(echo "${line}" | cut -f1)
        dst=.debpack$(echo "${line}" | cut -f2)
        mkdir -p "${dst%/*}"
        # Allow source wildcards
        # shellcheck disable=SC2086
        cp -v ${src} "${dst}"
    done

    green "Building package"
    fakeroot dpkg-deb --build .debpack

    dpkg-deb --info .debpack.deb
    dpkg --contents .debpack.deb
    dpkg-name --overwrite .debpack.deb

    green "Cleaning up"
    cleanup

    green "Done"
}

print_usage() {
    echo "Usage: $0 [version] [--init] [--help]"
}

debpackfile_path=Debpackfile
debian_path=debian

while getopts "hif:d:" opt; do
    case ${opt} in
        h)
            print_usage
            ;;
        i)
            init
            ;;
        f)
            debpackfile_path=${OPTARG}
            ;;
        d)
            debian_path=${OPTARG}
            ;;
        \?)
            print_usage
            exit 1
            ;;
        *)
            ;;
    esac
done

shift $(( OPTIND - 1 ))

build "$@"
